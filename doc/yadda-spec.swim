= Yadda Specification

This document is rather informal. The "spec" will be the actual Pegex grammar.
This document talks about what Yadda is in terms of comparing it to YAML 1.2.

Put another way, Yadda is YAML with the following changes:

== No Header, Footer, Directives, Tags, Anchors or Aliases

These things:

  %YAML 1.2
  %TAG …
  --- &coord1 !point
  - x: 33
    y: 44
  - *coord1
  ...

are not needed in config files. They *are* needed for serialization, but they
make the language more complicated.

== Only Block Style

YAML supports block style and flow style. The block style uses indentation
scoping and is what most people think of when they talk about YAML.

Flow style looks like JSON and uses `{}` and `[]`. Yadda doesn't support these
forms except for one special case discussed below.

== One Yadda Document Per Stream (File)

YAML allows multiple documents in a file, separated by `---` or `...`. Config
files just need one document.

The document can be a top-level sequence or a mapping, even though they will
almost always be mappings.

== Mapping Keys are Strings

YAML supports /any/ node as a mapping key (including numbers, boolean and even
mappings and sequences). Yadda is just for config, and so only strings are
needed.

There is no limitation on the content of the key string.

== Yadda Schema

The Yadda Schema is very close to JSON. Mapping keys are strings. Scalars can
be String, Number, Boolean or Null.

In Yadda, every unquoted value is a string with these exceptions:

  true: ++
  false: --
  number: [0, 5, -23, 3.1415, -2.22e-22]
  null:

The `++` and `--` are up for debate, but (unlike JSON) the values true, false
and null (without quotes) should just be strings.

== Plain and Quoted Strings are Single Line

YAML allows plain (unquoted) and both single-quoted and double-quoted scalars
to span multiple lines. Yadda does not.

Since any character sequencecan be expressed using double quotes and escapes,
and since there is a `\n` escape for newline, this is not a limitation on the
data that can be used.

Yadda also has 2 additional forms, for longer and/or multiline strings,
discussed next:

== YAML's `>` Becomes Yadda's `'` (and `"`)

YAML has a folded scalar form that is:

  folded: >
    text here
    is folded.

which means (in JSON):

  {"folded": "text here is folded\n"}

In Yadda this is:

  folded: '
    text here
    is folded.

There is no ending `'`. The indentation ends the scalar.

The scalar uses single quoting semantics (except there is no need to escape
single quotes). Using `"` instead gives double quoting semantics.

If the final newline is not wanted, YAML would:

  folded: >
    text here
    is folded.

Yadda does:

  folded: '
    text here
    is folded.'

Some edge cases. Scalar ends with a `'` (and no newline):

  folded: '
    text here
    is folded.''

Scalar ends with a `'` (and a newline):

  folded: '
    text here
    is folded.'
    '

Scalar ends with 2 newlines:

  folded: '
    text here
    is folded.

    '

Note that the previous example is valid YAML with a slightly different
semantic. That is consider OK and for both Yadda and YAML 2.0 because nobody
would ever write YAML that way. (ie its an extreme edge case).

== YAML's `|` Becomes Yadda's `'''` (and `"""`)

This YAML:

  yaml string: |
    foo:
      bar: baz

means this JSON:

  {"yaml string":"foo:\n  bar: baz\n"}

and becomes this Yadda:

  yaml string: '''
    foo:
      bar: baz

No terminating `'''`. Indentation ends it again. (Most of the techiques in the
last section apply here).

Indentation is removed. The line with the least indentation determines the
indentation. (In YAML the /first/ line determines the indentation).

Edge cases. This YAML:

  hill: |2
        /\
       /  \

becomes this Yadda:

  hill: '''
        /\
       /  \
    '''

The (usually optionial) trailing `'''` determines the indentation.

This YAML:

  hill: |2-
        /\
       /  \

becomes this Yadda:

  hill:
    '''
        /\
       /  \'''

Leading `'''` marks indentation, trailing `'''` marks non-default ending.

== Yadda Allows Single Line `[]`

The exception to flow style mention above is that Yadda allows flow sequences,
but the entire sequence most be on one line:

  colors: [red, white, blue]
  empty list: []
  empty map: {}

The `[…]` syntax is just really nice for short lists. We keep it, but we keep
it on one line!

Yadda also allows `{}` for and empty mapping. This should be rare, but
providing it is necessary to make sure it handles anything that JSON can.

== When Do Strings Need Quotes?

Mostly same rules as YAML. Even though `{` is not used in Yadda syntax, you
can't start a scalar with it, because I'd like to see Yadda one day become a
valid subset of YAML 2.0.

In YAML this is an error:

  foo: bar: baz

In Yadda it's not. It means (in JSON):

  {"foo": "bar: baz"}

The only times you need to quote are:

* String starts or ends with spaces.
* String starts with a YAML syntax character. Basically these: `!#%&*[{|>?`.
* String has characters that need double quote escapes.
* Keys beginning with `- `.
